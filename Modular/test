public class ChangeRequestServiceTests
{
    private readonly Mock<IChangeRequestRepository> _mockChangeRequestRepository;
    private readonly Mock<IBorrowRequestDeclineRepository> _mockBorrowRequestDeclineRepository;
    private readonly Mock<IMapper> _mockMapper;
    private readonly Mock<ILogger<ChangeRequestService>> _mockLogger;

    private readonly ChangeRequestService _sut;

    public ChangeRequestServiceTests()
    {
        _mockChangeRequestRepository = new Mock<IChangeRequestRepository>();
        _mockBorrowRequestDeclineRepository = new Mock<IBorrowRequestDeclineRepository>();
        _mockMapper = new Mock<IMapper>();
        _mockLogger = new Mock<ILogger<ChangeRequestService>>();

        _sut = new ChangeRequestService(
            _mockChangeRequestRepository.Object,
            _mockBorrowRequestDeclineRepository.Object,
            _mockMapper.Object,
            _mockLogger.Object
        );
    }

    // -----------------------------------------------------------------
    // 1) CompleteChangeRequestAsync Tests
    // -----------------------------------------------------------------

    [Fact]
    public async Task CompleteChangeRequestAsync_WhenChangeRequestIdIsNullOrEmpty_ShouldNotCallRepository()
    {
        // Arrange
        string? changeRequestId = null;

        // Act
        await _sut.CompleteChangeRequestAsync(changeRequestId);

        // Assert
        _mockChangeRequestRepository.Verify(
            x => x.PartiallyUpdateItemAsync(It.IsAny<string>(), It.IsAny<PropertyValueData>()),
            Times.Never
        );
    }

    [Fact]
    public async Task CompleteChangeRequestAsync_WhenChangeRequestNotFound_ShouldNotCallRepository()
    {
        // Arrange
        var changeRequestId = "SomeId";
        _mockChangeRequestRepository
            .Setup(x => x.GetItemAsync(changeRequestId))
            .ReturnsAsync((ChangeRequest?)null);

        // Act
        await _sut.CompleteChangeRequestAsync(changeRequestId);

        // Assert
        _mockChangeRequestRepository.Verify(
            x => x.PartiallyUpdateItemAsync(It.IsAny<string>(), It.IsAny<PropertyValueData>()),
            Times.Never
        );
    }

    [Fact]
    public async Task CompleteChangeRequestAsync_WhenChangeRequestExists_ShouldCallRepositoryWithCorrectArgs()
    {
        // Arrange
        var changeRequestId = "SomeId";
        var existingRequest = new ChangeRequest { Id = changeRequestId };

        _mockChangeRequestRepository
            .Setup(x => x.GetItemAsync(changeRequestId))
            .ReturnsAsync(existingRequest);

        // Act
        await _sut.CompleteChangeRequestAsync(changeRequestId);

        // Assert
        _mockChangeRequestRepository.Verify(
            x => x.PartiallyUpdateItemAsync(
                changeRequestId,
                It.Is<PropertyValueData>(p => 
                    // Verify the property update data if needed.
                    // For example, checking the status is set to "Completed" 
                    // or whatever your code does.
                    true
                )
            ),
            Times.Once
        );
    }

    // -----------------------------------------------------------------
    // 2) DeclineChangeRequestAsync Tests
    // -----------------------------------------------------------------

    [Fact]
    public async Task DeclineChangeRequestAsync_WhenChangeRequestIdIsNullOrEmpty_ShouldNotCallAnyRepository()
    {
        // Arrange
        string? changeRequestId = null;
        var reason = new BorrowBase(); // Fill as needed

        // Act
        await _sut.DeclineChangeRequestAsync(changeRequestId, reason);

        // Assert
        _mockChangeRequestRepository.Verify(
            x => x.PartiallyUpdateItemAsync(It.IsAny<string>(), It.IsAny<PropertyValueData>()),
            Times.Never
        );
        _mockBorrowRequestDeclineRepository.Verify(
            x => x.SaveAndUpdateItemAsync(It.IsAny<BorrowRequestDecline>(), It.IsAny<string>()),
            Times.Never
        );
    }

    [Fact]
    public async Task DeclineChangeRequestAsync_WhenChangeRequestNotFound_ShouldNotCallAnyRepository()
    {
        // Arrange
        var changeRequestId = "SomeId";
        var reason = new BorrowBase();

        _mockChangeRequestRepository
            .Setup(x => x.GetItemAsync(changeRequestId))
            .ReturnsAsync((ChangeRequest?)null);

        // Act
        await _sut.DeclineChangeRequestAsync(changeRequestId, reason);

        // Assert
        _mockBorrowRequestDeclineRepository.Verify(
            x => x.SaveAndUpdateItemAsync(It.IsAny<BorrowRequestDecline>(), It.IsAny<string>()),
            Times.Never
        );
        _mockChangeRequestRepository.Verify(
            x => x.PartiallyUpdateItemAsync(It.IsAny<string>(), It.IsAny<PropertyValueData>()),
            Times.Never
        );
    }

    [Fact]
    public async Task DeclineChangeRequestAsync_WhenChangeRequestExists_ShouldMapAndCallRepositories()
    {
        // Arrange
        var changeRequestId = "SomeId";
        var reason = new BorrowBase { /* fill as needed */ };
        var existingRequest = new ChangeRequest { Id = changeRequestId };

        _mockChangeRequestRepository
            .Setup(x => x.GetItemAsync(changeRequestId))
            .ReturnsAsync(existingRequest);

        var mappedDecline = new BorrowRequestDecline();
        _mockMapper
            .Setup(m => m.Map<BorrowRequestDecline>(reason))
            .Returns(mappedDecline);

        // Act
        await _sut.DeclineChangeRequestAsync(changeRequestId, reason);

        // Assert
        _mockMapper.Verify(m => m.Map<BorrowRequestDecline>(reason), Times.Once);

        _mockBorrowRequestDeclineRepository.Verify(
            x => x.SaveAndUpdateItemAsync(mappedDecline, existingRequest.Id),
            Times.Once
        );

        _mockChangeRequestRepository.Verify(
            x => x.PartiallyUpdateItemAsync(
                changeRequestId,
                It.IsAny<PropertyValueData>()),
            Times.Once
        );
    }

    // -----------------------------------------------------------------
    // 3) GetChangeRequestAsync Tests
    // -----------------------------------------------------------------

    [Fact]
    public async Task GetChangeRequestAsync_WhenChangeRequestIdIsNullOrEmpty_ShouldReturnDefaultAndNotCallRepository()
    {
        // Arrange
        string? changeRequestId = null;

        // Act
        var result = await _sut.GetChangeRequestAsync(changeRequestId);

        // Assert
        result.Should().BeNull();  // or Assert.Null(result);
        _mockChangeRequestRepository.Verify(
            x => x.GetItemAsync(It.IsAny<string>()),
            Times.Never
        );
    }

    [Fact]
    public async Task GetChangeRequestAsync_WhenItemNotFound_ShouldLogErrorAndReturnNull()
    {
        // Arrange
        var changeRequestId = "SomeId";
        _mockChangeRequestRepository
            .Setup(x => x.GetItemAsync(changeRequestId))
            .ReturnsAsync((ChangeRequest?)null);

        // Act
        var result = await _sut.GetChangeRequestAsync(changeRequestId);

        // Assert
        result.Should().BeNull();

        // Verify that an error log was written
        _mockLogger.Verify(
            logger => logger.Log(
                LogLevel.Error,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString().Contains(changeRequestId)),
                It.IsAny<Exception>(),
                It.Is<Func<It.IsAnyType, Exception?, string>>((v, t) => true)
            ),
            Times.Once
        );
    }

    [Fact]
    public async Task GetChangeRequestAsync_WhenItemFound_ShouldReturnTheChangeRequest()
    {
        // Arrange
        var changeRequestId = "SomeId";
        var existingRequest = new ChangeRequest { Id = changeRequestId };

        _mockChangeRequestRepository
            .Setup(x => x.GetItemAsync(changeRequestId))
            .ReturnsAsync(existingRequest);

        // Act
        var result = await _sut.GetChangeRequestAsync(changeRequestId);

        // Assert
        result.Should().NotBeNull();
        result!.Id.Should().Be(changeRequestId);
    }
}