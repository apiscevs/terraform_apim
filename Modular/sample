<!-- Keys used for rate limit lookup -->
<set-variable name="req.method" value="@(context.Request.Method)" />
<set-variable name="req.path"   value="@((string)context.Request.Url.Path.ToLower())" />
<set-variable name="rl.lookupKey" value="@($"rl:grp:{context.Variables["req.method"]}:{context.Variables["req.path"]}")" />

<!-- 1) Try to get pre-resolved group from cache -->
<cache-lookup-value key="@((string)context.Variables["rl.lookupKey"])" 
                    variable-name="selectedGroup" />

<choose>
  <when condition="@(!context.Variables.ContainsKey("selectedGroup"))">
    <!-- 2) Miss: parse JSON and resolve once -->
    <set-variable name="jsonConfig" value="@(
        Newtonsoft.Json.Linq.JObject.Parse((string)context.Variables["rateLimitConfig"]))" />
    <set-variable name="selectedGroup" value="@{
        var cfg = (Newtonsoft.Json.Linq.JObject)context.Variables["jsonConfig"];
        var method = (string)context.Variables["req.method"];
        var path   = (string)context.Variables["req.path"];
        var groups = (Newtonsoft.Json.Linq.JArray)cfg.SelectToken("groups");
        var grp = groups.FirstOrDefault(g => 
                   string.Equals((string)g["apis"][0]?["method"], method, StringComparison.OrdinalIgnoreCase) &&
                   string.Equals((string)g["apis"][0]?["route"],  path,   StringComparison.OrdinalIgnoreCase))
                 ?? (Newtonsoft.Json.Linq.JObject)cfg.SelectToken("default");
        return grp;
    }" />
    <!-- 3) Store the resolved group for next calls -->
    <cache-store-value key="@((string)context.Variables["rl.lookupKey"])" 
                       value="@(context.Variables["selectedGroup"])" 
                       duration="300" />  <!-- 5 minutes; bump on config change -->
  </when>
</choose>

<!-- Then read values without reparsing -->
<set-variable name="rateLimitCalls"          value="@(((Newtonsoft.Json.Linq.JObject)context.Variables["selectedGroup"]).Value<int>("callAmount"))" />
<set-variable name="rateLimitRenewalPeriod"  value="@(((Newtonsoft.Json.Linq.JObject)context.Variables["selectedGroup"]).Value<int>("renewalPeriod"))" />
<set-variable name="groupName"               value="@(((Newtonsoft.Json.Linq.JObject)context.Variables["selectedGroup"]).Value<string>("name"))" />
