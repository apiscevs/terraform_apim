using System;
using Xunit;

public class BusinessDayWindowsTests
{
    private static readonly TimeOnly Rollover16 = new(16, 0); // 16:00Z

    [Fact]
    public void Today_AfterRollover_AnchorsToTodayAtRollover()
    {
        var now = new DateTime(2025, 9, 17, 17, 00, 00, DateTimeKind.Utc);

        var (start, end) = BusinessDayWindows.GetDateRangeWindowUtc(DateRange.Today, Rollover16, now);

        Assert.Equal(new DateTime(2025, 9, 17, 16, 00, 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(2025, 9, 18, 16, 00, 00, DateTimeKind.Utc), end);
    }

    [Fact]
    public void Today_BeforeRollover_AnchorsToYesterdayAtRollover()
    {
        var now = new DateTime(2025, 9, 17, 15, 59, 59, DateTimeKind.Utc);

        var (start, end) = BusinessDayWindows.GetDateRangeWindowUtc(DateRange.Today, Rollover16, now);

        Assert.Equal(new DateTime(2025, 9, 16, 16, 00, 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(2025, 9, 17, 16, 00, 00, DateTimeKind.Utc), end);
    }

    [Fact]
    public void Yesterday_AfterRollover_IsPrevCustomDay()
    {
        var now = new DateTime(2025, 9, 17, 17, 00, 00, DateTimeKind.Utc);

        var (start, end) = BusinessDayWindows.GetDateRangeWindowUtc(DateRange.Yesterday, Rollover16, now);

        Assert.Equal(new DateTime(2025, 9, 16, 16, 00, 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(2025, 9, 17, 16, 00, 00, DateTimeKind.Utc), end);
    }

    [Fact]
    public void Yesterday_BeforeRollover_IsDayBeforeYesterday()
    {
        var now = new DateTime(2025, 9, 17, 15, 59, 59, DateTimeKind.Utc);

        var (start, end) = BusinessDayWindows.GetDateRangeWindowUtc(DateRange.Yesterday, Rollover16, now);

        Assert.Equal(new DateTime(2025, 9, 15, 16, 00, 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(2025, 9, 16, 16, 00, 00, DateTimeKind.Utc), end);
    }

    [Fact]
    public void LastSevenDays_WindowSpans7CustomDays_EndsAtNextStart()
    {
        var now = new DateTime(2025, 9, 17, 17, 00, 00, DateTimeKind.Utc);

        var (start, end) = BusinessDayWindows.GetDateRangeWindowUtc(DateRange.LastSevenDays, Rollover16, now);

        Assert.Equal(new DateTime(2025, 9, 10, 16, 00, 00, DateTimeKind.Utc), start); // 7 days back from currentStart (17th@16 -> 10th@16)
        Assert.Equal(new DateTime(2025, 9, 18, 16, 00, 00, DateTimeKind.Utc), end);   // nextStart
    }

    [Fact]
    public void LastThirtyDays_WindowSpans30CustomDays()
    {
        var now = new DateTime(2025, 9, 17, 17, 00, 00, DateTimeKind.Utc);

        var (start, end) = BusinessDayWindows.GetDateRangeWindowUtc(DateRange.LastThirtyDays, Rollover16, now);

        Assert.Equal(new DateTime(2025, 8, 18, 16, 00, 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(2025, 9, 18, 16, 00, 00, DateTimeKind.Utc), end);
    }

    [Fact]
    public void Inclusivity_StartIncluded_EndExcluded()
    {
        var now = new DateTime(2025, 9, 17, 17, 00, 00, DateTimeKind.Utc);
        var (start, end) = BusinessDayWindows.GetDateRangeWindowUtc(DateRange.Today, Rollover16, now);

        Assert.True(InRange(start.AddTicks(0), start, end));   // start included
        Assert.False(InRange(end, start, end));                // end excluded
        Assert.True(InRange(end.AddTicks(-1), start, end));    // just before end included
    }

    private static bool InRange(DateTime value, DateTime start, DateTime end)
        => value >= start && value < end;
}
