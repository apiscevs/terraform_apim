.AddPolicyHandler((sp, req) =>
{
    // this client only calls /userinfo; if not, guard by path:
    var isUserInfo = req.RequestUri?.AbsolutePath.Contains(
        "/rest/1.0/idptoken/userinfo", StringComparison.OrdinalIgnoreCase) == true;
    if (!isUserInfo) return Policy.NoOpAsync<HttpResponseMessage>();

    var logger = sp.GetRequiredService<ILoggerFactory>().CreateLogger("IdpRetry");
    var jitter = new Random();

    return Policy<HttpResponseMessage>
        // retry 401 (and 429 if you want)
        .HandleResult(r => r.StatusCode == HttpStatusCode.Unauthorized || (int)r.StatusCode == 429)
        // exponential backoff + jitter, 2 retries: ~200ms, ~400ms (+ jitter)
        .WaitAndRetryAsync(2,
            attempt => TimeSpan.FromMilliseconds(200 * Math.Pow(2, attempt - 1))
                      + TimeSpan.FromMilliseconds(jitter.Next(50, 150)),
            onRetry: (outcome, delay, attempt, ctx) =>
            {
                var r = outcome.Result;
                logger.LogWarning("IDP retry #{Attempt} in {Delay}ms for {Url}, status={Status}",
                    attempt, delay.TotalMilliseconds,
                    r?.RequestMessage?.RequestUri, (int?)r?.StatusCode);
            });
});