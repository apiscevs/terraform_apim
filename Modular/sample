       public async Task AdjustContainersAsync(
            List<ContainerDefinition> containers,
            bool bumpDbSharedIfNeeded = false)
        {
            // 1) Read current DB-level throughput (int? returned, null => shared-only)
            int currentDbRu = (await _database.ReadThroughputAsync()) ?? 0;
            Console.WriteLine($"DB shared RU/s = {currentDbRu}");

            // 2) Compute total requested
            int totalRequested = containers.Sum(c => c.AutoscaleMaxRu);
            Console.WriteLine($"Total requested autoscale RU/s = {totalRequested}");

            // 3) Optionally bump DB shared throughput
            if (bumpDbSharedIfNeeded && totalRequested > currentDbRu)
            {
                Console.WriteLine($"→ Updating DB shared throughput to {totalRequested} RU/s");
                // CreateManual sets a fixed throughput
                var newDbProps = ThroughputProperties.CreateManualThroughput(totalRequested);
                await _database.ReplaceThroughputAsync(newDbProps);
            }

            // 4) For each container: read & adjust
            foreach (var def in containers)
            {
                Container container = _database.GetContainer(def.Name);

                // Read its current throughput (int? returned, null => inherited/shared)
                int curr = (await container.ReadThroughputAsync()) ?? 0;
                Console.WriteLine($"- Container '{def.Name}' current RU/s = {curr}");

                if (curr < def.AutoscaleMaxRu)
                {
                    Console.WriteLine(
                        $"  → Scaling '{def.Name}' to autoscale max {def.AutoscaleMaxRu}"
                    );
                    var autoscaleProps =
                        ThroughputProperties.CreateAutoscaleThroughput(def.AutoscaleMaxRu);
                    await container.ReplaceThroughputAsync(autoscaleProps);
                }
                else
                {
                    Console.WriteLine($"  → No change needed for '{def.Name}'");
                }
            }
        }