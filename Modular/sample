public static class LuaScriptRegistry
{
    private static IConnectionMultiplexer? _redisMux;
    private static readonly ConcurrentDictionary<string, Lazy<Task<RedisScript>>> _scripts = new();

    private static bool _initialized = false;
    private static readonly object _lock = new();

    public static void Initialize(IConnectionMultiplexer redisMux)
    {
        if (_initialized) return;

        lock (_lock)
        {
            if (_initialized) return;

            _redisMux = redisMux;

            _scripts.TryAdd("ValidateMatchingTotals", new Lazy<Task<RedisScript>>(() => LoadScriptAsync(
                key: "ValidateMatchingTotals",
                script: $@"
                    local deltaLender = tonumber(ARGV[1])
                    -- your full Lua logic here
                    return {{tostring(deltaLender)}}
                "), LazyThreadSafetyMode.ExecutionAndPublication));

            // Add more scripts here if needed...

            _initialized = true;
        }
    }

    private static async Task<RedisScript> LoadScriptAsync(string key, string script)
    {
        if (_redisMux == null)
            throw new InvalidOperationException("LuaScriptRegistry not initialized. Call Initialize() with IConnectionMultiplexer first.");

        var db = _redisMux.GetDatabase();
        var sha = await db.ScriptLoadAsync(script);
        return new RedisScript(script, sha);
    }

    public static Task<RedisScript> GetAsync(string key)
    {
        if (!_initialized)
            throw new InvalidOperationException("LuaScriptRegistry not initialized.");

        if (_scripts.TryGetValue(key, out var lazyScript))
            return lazyScript.Value;

        throw new KeyNotFoundException($"Lua script '{key}' not registered.");
    }

    // Optional: preload all scripts (only if you really want eager loading)
    public static Task WarmUpAsync() => Task.WhenAll(_scripts.Values.Select(s => s.Value));
}

public record RedisScript(string Script, RedisResult Sha);