# Scripts for APIM Setup

## Hard Link Setup for Swagger File

### Purpose
This script (`setup-swagger-link-local-dev.bat`) creates a **hard link** for the Swagger file to avoid manual copying while keeping a **single source of truth**.

### Why?
- The **Swagger file belongs to the API project** and should stay there.
- **APIM is API-agnostic** but needs the Swagger file for local development.
- In **Jenkins**, the file will be **copied before packaging**, ensuring consistency.

### How to Use
After cloning the repository, run:

#### **Windows**
```cmd
setup-swagger-link-local-dev.bat
```cmd

## APIM Deployment Script

### Purpose

`deploy-apim.ps1` automates the management of APIs inside APIM. This is separate from Terraform, which manages APIM resources, products, and backends. The separation ensures that frequently changing components like **Swagger definitions and policies** are handled where they are most cohesive.

### Structure

- **`deploy-apim.ps1`** - Main script for deploying APIs into APIM.
- **`functions.ps1`** - Contains helper functions used in `deploy-apim.ps1`.
- **Environment configuration files** (`Configuration/Environments/*.json`) - Define environment-specific API settings like authentication, subscriptions, CORS, backend IDs, and policies.

### How It Works

The script performs the following actions:

- **Upserts** the API into APIM using environment-specific settings.
- **Associates** the API with the correct APIM product.
- **Uploads** policy and Swagger files.
- **Disables** subscription requirements.
- **Creates new revisions** when needed.

### How to Use

#### **Locally (Authenticated Azure Account)**

```powershell
./deploy-apim.ps1 -EnvironmentName "dev2" -ApiRevision "rev-123"
```
#### **Using Service Principal Authentication**
```powershell
./deploy-apim.ps1 -EnvironmentName "dev2" -ApiRevision "rev-456" -ClientId "<client-id>" -ClientSecret "<client-secret>"
```


Prerequisites
Ensure you have the necessary Azure PowerShell modules installed:
```powershell
Install-Module -Name Az.Accounts -Force
Install-Module -Name Az.APIM -Force
```




iif(
    // Compare original timestamp to computed market rollover time
    ActionDateTimeUtc < add(
        toTimestamp(toString(ActionDateTimeUtc, 'yyyy-MM-dd'), 'yyyy-MM-dd'),
        hours(
            iif(
                hour(
                    fromUTC(
                        toTimestamp(toString(ActionDateTimeUtc, 'yyyy-MM-dd'), 'yyyy-MM-dd'),
                        'America/New_York'
                    )
                ) == 19,
                21,
                20
            )
        )
    ),
    // If before rollover, trading date = start-of-day (midnight)
    toTimestamp(toString(ActionDateTimeUtc, 'yyyy-MM-dd'), 'yyyy-MM-dd'),
    // Otherwise, trading date = next day
    add(
        toTimestamp(toString(ActionDateTimeUtc, 'yyyy-MM-dd'), 'yyyy-MM-dd'),
        days(1)
    )
)


CREATE NONCLUSTERED INDEX IX_ActionItems_TradingDate_JoinKeys
ON dbo.ActionItems (
    TradingDate,               -- used in join (and group by)
    BorrowRequestId,           -- join key
    LenderAvailabilityId,      -- join key
    MarketDestination,         -- join key and group by
    DescriptionType,           -- join key and group by (RecommendationType)
    BorrowerPartyName,         -- join key and group by
    LenderPartyName,           -- join key and group by
    BorrowerPartyPlatformId,   -- join key and group by
    LenderPartyPlatformId      -- join key and group by
)
INCLUDE (Ts);  -- Ts is needed for the MAX(Ts) computation
GO
111

CREATE OR ALTER FUNCTION dbo.GetTradingRangeWithWeekend
(
    @InputDateTime DATETIME
)
RETURNS @Range TABLE
(
    RangeFilterStart DATETIME,
    RangeFilterEnd DATETIME
)
AS
BEGIN
    -- Convert from UTC to Eastern Time (which is DST-aware)
    DECLARE @LocalDateTime DATETIMEOFFSET = @InputDateTime AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time';
    DECLARE @LocalDate DATE = CAST(@LocalDateTime AS DATE);
    DECLARE @LocalTime TIME = CAST(@LocalDateTime AS TIME);

    -- Determine base trading date based on the 4:00 PM cutoff
    DECLARE @TradingDate DATE = 
         CASE 
            WHEN @LocalTime >= '16:00:00' THEN @LocalDate
            ELSE DATEADD(DAY, -1, @LocalDate)
         END;

    -- Adjust trading date for weekends (if trading date falls on Saturday/Sunday, use the previous Friday)
    DECLARE @TradingDateAdjusted DATE = 
         CASE 
            WHEN DATENAME(WEEKDAY, @TradingDate) = 'Saturday' THEN DATEADD(DAY, -1, @TradingDate)
            WHEN DATENAME(WEEKDAY, @TradingDate) = 'Sunday' THEN DATEADD(DAY, -2, @TradingDate)
            ELSE @TradingDate
         END;

    -- Trading day start is @TradingDateAdjusted at 4:00 PM
    DECLARE @RangeFilterStart DATETIME = DATEADD(SECOND, 16 * 3600, CAST(@TradingDateAdjusted AS DATETIME));

    -- Determine next trading day:
    DECLARE @NextTradingDate DATE = 
         CASE 
            WHEN DATENAME(WEEKDAY, @TradingDateAdjusted) = 'Friday'
                THEN DATEADD(DAY, 3, @TradingDateAdjusted) -- Friday -> Monday
            ELSE DATEADD(DAY, 1, @TradingDateAdjusted)
         END;

    DECLARE @RangeFilterEnd DATETIME = DATEADD(SECOND, 16 * 3600, CAST(@NextTradingDate AS DATETIME));

    INSERT INTO @Range (RangeFilterStart, RangeFilterEnd)
    VALUES (@RangeFilterStart, @RangeFilterEnd);

    RETURN;
END;
GO
