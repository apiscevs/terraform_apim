public class RedisScriptManagerTests
{
    private readonly Mock<IConnectionMultiplexer> _redisMock;
    private readonly Mock<IServer> _serverMock;
    private readonly RedisScriptManager _scriptManager;
    private int _loadCallCount;

    public RedisScriptManagerTests()
    {
        _redisMock = new Mock<IConnectionMultiplexer>();
        _serverMock = new Mock<IServer>();

        var ep = new DnsEndPoint("localhost", 6379);

        _redisMock.Setup(r => r.GetEndPoints(It.IsAny<bool>()))
                  .Returns(new EndPoint[] { ep });

        _redisMock.Setup(r => r.GetServer(It.IsAny<EndPoint>()))
                  .Returns(_serverMock.Object);

        // LuaScript.LoadAsync uses server.ScriptLoadAsync(string, flags) -> Task<byte[]>
        _serverMock
            .Setup(s => s.ScriptLoadAsync(It.IsAny<string>(), It.IsAny<CommandFlags>()))
            .ReturnsAsync(() =>
            {
                Interlocked.Increment(ref _loadCallCount);
                // 20-byte SHA1-like payload is fine for tests
                return new byte[] { 1,2,3,4,5,6,7,8,9,10, 11,12,13,14,15,16,17,18,19,20 };
            });

        // LoadAsync also touches server.Multiplexer; make sure it isnâ€™t null
        _serverMock.SetupGet(s => s.Multiplexer).Returns(_redisMock.Object);

        _scriptManager = new RedisScriptManager(_redisMock.Object);
    }

    [Fact]
    public async Task GetOrLoadAsync_LoadsScriptOnlyOnce_WhenCalledConcurrently()
    {
        var def = new ScriptDefinition("my-script", "return 42");

        var t1 = _scriptManager.GetOrLoadAsync(def);
        var t2 = _scriptManager.GetOrLoadAsync(def);
        var t3 = _scriptManager.GetOrLoadAsync(def);
        var results = await Task.WhenAll(t1, t2, t3);

        Assert.Same(results[0], results[1]);
        Assert.Same(results[0], results[2]);
        Assert.Equal(1, _loadCallCount);
    }

    [Fact]
    public async Task GetOrLoadAsync_LoadsScriptOnlyOnce_AcrossMultipleAwaiters()
    {
        var def = new ScriptDefinition("lazy-script", "return 1");

        var t1 = _scriptManager.GetOrLoadAsync(def);
        var t2 = _scriptManager.GetOrLoadAsync(def);
        var t3 = _scriptManager.GetOrLoadAsync(def);
        await Task.WhenAll(t1, t2, t3);

        Assert.Equal(1, _loadCallCount);
    }

    [Fact]
    public async Task GetOrLoadAsync_ReturnsCachedScriptOnSubsequentCalls()
    {
        var def = new ScriptDefinition("cached-script", "return 2");

        var first = await _scriptManager.GetOrLoadAsync(def);
        var second = await _scriptManager.GetOrLoadAsync(def);

        Assert.Same(first, second);
        _serverMock.Verify(s => s.ScriptLoadAsync(It.IsAny<string>(), It.IsAny<CommandFlags>()), Times.Once);
    }

    [Fact]
    public async Task RemoveScript_RemovesFromCacheAndReloads()
    {
        var def = new ScriptDefinition("temp-script", "return 3");

        var first = await _scriptManager.GetOrLoadAsync(def);
        _scriptManager.RemoveScript(def.Name);
        var second = await _scriptManager.GetOrLoadAsync(def);

        Assert.NotSame(first, second);
        _serverMock.Verify(s => s.ScriptLoadAsync(It.IsAny<string>(), It.IsAny<CommandFlags>()), Times.Exactly(2));
    }
}