using System;
using System.Threading;
using System.Threading.Channels;
using System.Threading.Tasks;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

public class ChannelConsumerService : BackgroundService
{
    private readonly Channel<string> _channel;
    private readonly ILogger<ChannelConsumerService> _logger;

    public ChannelConsumerService(Channel<string> channel, ILogger<ChannelConsumerService> logger)
    {
        _channel = channel;
        _logger = logger;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("ChannelConsumerService started");

        while (!stoppingToken.IsCancellationRequested)
        {
            while (_channel.Reader.TryRead(out var message))
            {
                try
                {
                    // Simulate processing
                    _logger.LogInformation("Processing: {Message}", message);
                    await Task.Delay(100, stoppingToken); // simulate work
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error processing message");
                }
            }

            // Wait before checking again
            await Task.Delay(TimeSpan.FromSeconds(1), stoppingToken);
        }

        _logger.LogInformation("ChannelConsumerService stopped");
    }
}


public class TestProducerService : BackgroundService
{
    private readonly Channel<string> _channel;

    public TestProducerService(Channel<string> channel)
    {
        _channel = channel;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        int counter = 0;
        while (!stoppingToken.IsCancellationRequested)
        {
            await _channel.Writer.WriteAsync($"Message {++counter}", stoppingToken);
            await Task.Delay(500, stoppingToken); // simulate burst
        }
    }
}