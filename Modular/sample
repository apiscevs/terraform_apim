public class RedisScriptManagerTests
{
    private readonly Mock<IConnectionMultiplexer> _redisMock;
    private readonly Mock<IServer> _serverMock;
    private readonly RedisScriptManager _scriptManager;

    public RedisScriptManagerTests()
    {
        _redisMock = new Mock<IConnectionMultiplexer>();
        _serverMock = new Mock<IServer>();

        _redisMock.Setup(r => r.GetEndPoints(It.IsAny<bool>()))
                  .Returns(new EndPoint[] { new DnsEndPoint("localhost", 6379) });

        _redisMock.Setup(r => r.GetServer(It.IsAny<EndPoint>()))
                  .Returns(_serverMock.Object);

        _scriptManager = new RedisScriptManager(_redisMock.Object);
    }

    [Fact]
    public async Task GetOrLoadAsync_LoadsAndCachesScript()
    {
        // Arrange
        var scriptName = "test-script";
        var scriptBody = "return 1";
        var scriptDefinition = new ScriptDefinition(scriptName, scriptBody);
        var loadedScriptMock = LuaScript.Prepare(scriptBody).Load(_serverMock.Object);

        _serverMock.Setup(s => s.ScriptLoadAsync(It.IsAny<RedisKey>(), It.IsAny<CommandFlags>()))
                   .ReturnsAsync(loadedScriptMock.ExecutableScript);

        // Act
        var result1 = await _scriptManager.GetOrLoadAsync(scriptDefinition);
        var result2 = await _scriptManager.GetOrLoadAsync(scriptDefinition); // should come from cache

        // Assert
        Assert.Equal(result1.ExecutableScript, result2.ExecutableScript);
    }

    [Fact]
    public async Task RemoveScript_RemovesFromCache()
    {
        // Arrange
        var scriptName = "temp-script";
        var scriptDefinition = new ScriptDefinition(scriptName, "return 2");

        await _scriptManager.GetOrLoadAsync(scriptDefinition);

        // Act
        _scriptManager.RemoveScript(scriptName);

        // Assert: reloading should trigger new call (not cached)
        _serverMock.Setup(s => s.ScriptLoadAsync(It.IsAny<RedisKey>(), It.IsAny<CommandFlags>()))
                   .ReturnsAsync(LuaScript.Prepare("return 2").Load(_serverMock.Object).ExecutableScript)
                   .Verifiable();

        await _scriptManager.GetOrLoadAsync(scriptDefinition);

        _serverMock.Verify(); // ensure load happened again
    }
    
    [Fact]
    public async Task GetOrLoadAsync_OnlyLoadsScriptOnce()
    {
        // Arrange
        var scriptName = "lazy-script";
        var scriptBody = "return 3";
        var scriptDefinition = new ScriptDefinition(scriptName, scriptBody);
    
        var loadCallCount = 0;
    
        _serverMock
            .Setup(s => s.ScriptLoadAsync(It.IsAny<RedisKey>(), It.IsAny<CommandFlags>()))
            .ReturnsAsync(() =>
            {
                Interlocked.Increment(ref loadCallCount);
                return LuaScript.Prepare(scriptBody).Load(_serverMock.Object).ExecutableScript;
            });
    
        // Act
        var tasks = new[]
        {
            _scriptManager.GetOrLoadAsync(scriptDefinition),
            _scriptManager.GetOrLoadAsync(scriptDefinition),
            _scriptManager.GetOrLoadAsync(scriptDefinition)
        };
    
        await Task.WhenAll(tasks);
    
        // Assert
        Assert.Equal(1, loadCallCount); // loaded only once
    }
}
