// nowUtc: DateTimeOffset.UtcNow (or fixed in tests)
// rollOverUtc: TimeSpan from your GetMarketRolloverTimeAsync() (TimeOnly.ToTimeSpan() if needed)
private static (DateTimeOffset startCurrent, DateTimeOffset startNext)
GetAnchors(DateTimeOffset nowUtc, TimeSpan rollOverUtc)
{
    var todayRoll = nowUtc.Date + rollOverUtc;          // “today at rollover”
    var startCurrent = nowUtc >= todayRoll ? todayRoll   // started today at rollover
                                           : todayRoll.AddDays(-1); // or yesterday at rollover
    var startNext = startCurrent.AddDays(1);
    return (startCurrent, startNext);
}
2) Build the predicate for your enum
csharp
Копировать код
public static Expression<Func<SubmittedOrderMetaData, bool>> BuildDateRangePredicate(
    DateRange range,
    TimeSpan rollOverUtc,
    DateTimeOffset? nowUtcOverride = null)
{
    var nowUtc = nowUtcOverride ?? DateTimeOffset.UtcNow;
    var (startCurrent, startNext) = GetAnchors(nowUtc, rollOverUtc);

    DateTimeOffset start, end;

    switch (range)
    {
        case DateRange.Today:
            start = startCurrent;
            end   = startNext;
            break;

        case DateRange.Yesterday:
            start = startCurrent.AddDays(-1);
            end   = startCurrent;
            break;

        case DateRange.LastSevenDays:
            // Last 7 “custom days” including the current one
            start = startCurrent.AddDays(-7);
            end   = startNext;
            break;

        case DateRange.LastThirtyDays:
            start = startCurrent.AddDays(-30);
            end   = startNext;
            break;

        default:
            return x => true; // no filter
    }

    // If your column is DateTime (UTC), use DateTime instead of DateTimeOffset here.
    return x => x.SubmittedTime >= start && x.SubmittedTime < end;
}
3) Use with LinqKit / your repo
csharp
Копировать код
var rollOverTime = await _marketTimeService.GetMarketRolloverTimeAsync(); // TimeOnly/TimeSpan in UTC
TimeSpan rollOverUtc = rollOverTime is TimeOnly ro ? ro.ToTimeSpan() : (TimeSpan)rollOverTime;

var datePred = BuildDateRangePredicate(dateRange, rollOverUtc);

var predicate = PredicateBuilder.New<SubmittedOrderMetaData>(true)
    .And(t => t.PartyPlatformId == partyPlatformId)
    .And(datePred);

// EF Core example (note AsExpandable if you use LinqKit):
var query = db.Set<SubmittedOrderMetaData>().AsExpandable().Where(predicate);