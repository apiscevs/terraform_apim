private JsonSerializer CreateSerializer() => JsonSerializer.Create(_serializerSettings);

        public override T FromStream<T>(Stream stream)
        {
            if (stream == null || !stream.CanRead)
            {
                return default!;
            }

            // Read UTF-8 JSON directly, small buffer, leave stream open
            using var streamReader = new StreamReader(
                stream,
                Encoding.UTF8,
                detectEncodingFromByteOrderMarks: false,
                bufferSize: 1024,
                leaveOpen: true);

            using var jsonReader = new JsonTextReader(streamReader)
            {
                CloseInput = false
            };

            if (!jsonReader.Read())
            {
                return default!;
            }

            var serializer = CreateSerializer();
            var data = serializer.Deserialize<T>(jsonReader);
            return data!;
        }

        public override Stream ToStream<T>(T input)
        {
            // Write JSON directly to a MemoryStream to avoid intermediate strings/byte[]
            var memoryStream = new MemoryStream();

            using (var streamWriter = new StreamWriter(
                memoryStream,
                Encoding.UTF8,
                bufferSize: 1024,
                leaveOpen: true))
            using (var jsonWriter = new JsonTextWriter(streamWriter)
            {
                Formatting = Formatting.None
            })
            {
                var serializer = CreateSerializer();
                serializer.Serialize(jsonWriter, input);
                jsonWriter.Flush();
                streamWriter.Flush();
            }

            memoryStream.Position = 0;
            return memoryStream;
        }