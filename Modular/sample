using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Cosmos;

async Task DeleteAllDocumentsAsync(Container container)
{
    // Parallelism tweakâ€”feel free to raise if your client & network can handle it
    var parallelOptions = new ParallelOptions { MaxDegreeOfParallelism = 100 };

    // Query for id + partition key (assumes your PK path is /id)
    var query = new QueryDefinition("SELECT c.id, c.id AS pk FROM c");
    var iterator = container.GetItemQueryIterator<dynamic>(
        query,
        continuationToken: null,
        requestOptions: new QueryRequestOptions { MaxItemCount = 1000 }
    );

    Console.WriteLine("Starting delete of all documents...");

    while (iterator.HasMoreResults)
    {
        FeedResponse<dynamic> page = await iterator.ReadNextAsync();

        // Fire deletes in parallel for this page
        await Parallel.ForEachAsync(page, parallelOptions, async (doc, ct) =>
        {
            string id = doc.id.ToString();
            string pk = doc.pk.ToString();

            try
            {
                await container.DeleteItemAsync<dynamic>(
                    id,
                    new PartitionKey(pk),
                    cancellationToken: ct
                );
            }
            catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.TooManyRequests)
            {
                // back off & retry once
                await Task.Delay(ex.RetryAfter, ct);
                await container.DeleteItemAsync<dynamic>(
                    id,
                    new PartitionKey(pk),
                    cancellationToken: ct
                );
            }
        });

        Console.WriteLine($"Deleted a page of {page.Count} items...");
    }

    Console.WriteLine("All documents deleted.");
}

// Usage (somewhere in your async method):
// Ensure your client was constructed with:
//    new CosmosClient(endpoint, key, new CosmosClientOptions { AllowBulkExecution = true });
await DeleteAllDocumentsAsync(container);
