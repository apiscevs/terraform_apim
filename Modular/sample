using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Azure.Cosmos;

namespace CosmosScaleWithCosmosClient
{
    public class ContainerDefinition
    {
        public string Name { get; set; }
        public int AutoscaleMaxRu { get; set; }
    }

    public class ThroughputAdjuster
    {
        private readonly CosmosClient _client;
        private readonly CosmosDatabase _database;

        public ThroughputAdjuster(string endpointUri, string primaryKey, string databaseName)
        {
            _client = new CosmosClient(endpointUri, primaryKey);
            _database = _client.GetDatabase(databaseName);
        }

        public async Task AdjustContainersAsync(
            List<ContainerDefinition> containers,
            bool bumpDbSharedIfNeeded = false)
        {
            // 1) Read current DB-level throughput
            var dbThroughputResponse = await _database.ReadThroughputPropertiesAsync();
            var dbProps = dbThroughputResponse.Resource;
            int currentDbRu = dbProps.AutoscaleMaxThroughput ?? dbProps.Throughput;
            Console.WriteLine($"DB shared RU/s = {currentDbRu}");

            // 2) Compute total requested
            int totalRequested = containers.Sum(c => c.AutoscaleMaxRu);
            Console.WriteLine($"Total requested autoscale RU/s = {totalRequested}");

            // 3) Optionally bump DB shared throughput
            if (bumpDbSharedIfNeeded && totalRequested > currentDbRu)
            {
                Console.WriteLine($"→ Updating DB shared throughput to {totalRequested} RU/s");
                var newDbProps = ThroughputProperties.CreateManualThroughput(totalRequested);
                await _database.ReplaceThroughputPropertiesAsync(newDbProps);
            }

            // 4) For each container: read & adjust
            foreach (var def in containers)
            {
                var container = _database.GetContainer(def.Name);

                // Read its current throughput (falls back to 0 if shared-only)
                int curr = 0;
                try
                {
                    var ctResponse = await container.ReadThroughputPropertiesAsync();
                    var ctProps = ctResponse.Resource;
                    curr = ctProps.AutoscaleMaxThroughput ?? ctProps.Throughput;
                }
                catch (CosmosException ex) when (ex.Status == 404)
                {
                    // No dedicated throughput → inherited from DB
                    curr = 0;
                }

                Console.WriteLine(
                    $"- Container '{def.Name}' current RU/s = {curr}"
                );

                if (curr < def.AutoscaleMaxRu)
                {
                    Console.WriteLine(
                        $"  → Scaling '{def.Name}' to autoscale max {def.AutoscaleMaxRu}"
                    );

                    var autoscaleProps =
                        ThroughputProperties.CreateAutoscaleThroughput(def.AutoscaleMaxRu);
                    await container.ReplaceThroughputPropertiesAsync(autoscaleProps);
                }
                else
                {
                    Console.WriteLine($"  → No change needed for '{def.Name}'");
                }
            }
        }
    }

    class Program
    {
        static async Task Main()
        {
            var adjuster = new ThroughputAdjuster(
                endpointUri: "https://your-account.documents.azure.com:443/",
                primaryKey:   "your-primary-key",
                databaseName: "atom"
            );

            var containers = new List<ContainerDefinition>
            {
                new ContainerDefinition { Name = "submittedOrderMetaData", AutoscaleMaxRu = 4000 },
                new ContainerDefinition { Name = "changeFeedLeases",     AutoscaleMaxRu = 1000 },
                new ContainerDefinition { Name = "dropdownReferenceData",AutoscaleMaxRu = 2000 },
            };

            await adjuster.AdjustContainersAsync(containers, bumpDbSharedIfNeeded: true);
        }
    }
}
