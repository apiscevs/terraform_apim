    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("Batch consumer started");

        var buffer = new List<string>(BatchSize);
        var timer = new PeriodicTimer(FlushInterval);

        try
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                // Non-blocking read loop until flush interval
                while (_channel.Reader.TryRead(out var message))
                {
                    buffer.Add(message);

                    if (buffer.Count >= BatchSize)
                        break;
                }

                // Wait for flush interval or cancellation
                await timer.WaitForNextTickAsync(stoppingToken);

                if (buffer.Count > 0)
                {
                    await ProcessBatchAsync(buffer, stoppingToken);
                    buffer.Clear();
                }
            }
        }
        catch (OperationCanceledException)
        {
            _logger.LogInformation("Batch consumer stopping...");
        }
    }

    private Task ProcessBatchAsync(List<string> batch, CancellationToken token)
    {
        // Simulate sending downstream
        _logger.LogInformation("Sending batch: {Count} items", batch.Count);
        foreach (var item in batch)
        {
            _logger.LogInformation(" â†’ {Item}", item);
        }
        return Task.CompletedTask;
    }