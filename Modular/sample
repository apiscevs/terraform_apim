# Scripts for APIM Setup

## Hard Link Setup for Swagger File

### Purpose
This script (`setup-swagger-link-local-dev.bat`) creates a **hard link** for the Swagger file to avoid manual copying while keeping a **single source of truth**.

### Why?
- The **Swagger file belongs to the API project** and should stay there.
- **APIM is API-agnostic** but needs the Swagger file for local development.
- In **Jenkins**, the file will be **copied before packaging**, ensuring consistency.

### How to Use
After cloning the repository, run:

#### **Windows**
```cmd
setup-swagger-link-local-dev.bat
```cmd

## APIM Deployment Script

### Purpose

`deploy-apim.ps1` automates the management of APIs inside APIM. This is separate from Terraform, which manages APIM resources, products, and backends. The separation ensures that frequently changing components like **Swagger definitions and policies** are handled where they are most cohesive.

### Structure

- **`deploy-apim.ps1`** - Main script for deploying APIs into APIM.
- **`functions.ps1`** - Contains helper functions used in `deploy-apim.ps1`.
- **Environment configuration files** (`Configuration/Environments/*.json`) - Define environment-specific API settings like authentication, subscriptions, CORS, backend IDs, and policies.

### How It Works

The script performs the following actions:

- **Upserts** the API into APIM using environment-specific settings.
- **Associates** the API with the correct APIM product.
- **Uploads** policy and Swagger files.
- **Disables** subscription requirements.
- **Creates new revisions** when needed.

### How to Use

#### **Locally (Authenticated Azure Account)**

```powershell
./deploy-apim.ps1 -EnvironmentName "dev2" -ApiRevision "rev-123"
```
#### **Using Service Principal Authentication**
```powershell
./deploy-apim.ps1 -EnvironmentName "dev2" -ApiRevision "rev-456" -ClientId "<client-id>" -ClientSecret "<client-secret>"
```


Prerequisites
Ensure you have the necessary Azure PowerShell modules installed:
```powershell
Install-Module -Name Az.Accounts -Force
Install-Module -Name Az.APIM -Force
```




iif(
    // Compare ActionDateTimeUtc with market rollover time in UTC:
    $ActionDateTimeUtc < add(
         // start-of-day in UTC
         toTimestamp(formatDateTime($ActionDateTimeUtc, 'yyyy-MM-dd')),
         // Add either 21 or 20 hours (in ms)
         toInteger(multiply(
             iif(
                 hour(
                     convertTimezone(
                         toTimestamp(formatDateTime($ActionDateTimeUtc, 'yyyy-MM-dd')),
                         'UTC',
                         'Eastern Standard Time'
                     )
                 ) == 19,
                 21, // if the converted start-of-day hour equals 19, use 21 hours
                 20  // otherwise use 20 hours
             ),
             3600000  // multiply hours by 3,600,000 (ms per hour)
         ))
    ),
    // If ActionDateTimeUtc is before rollover time, the trading date is start-of-day
    toTimestamp(formatDateTime($ActionDateTimeUtc, 'yyyy-MM-dd')),
    // Otherwise, add one day (86,400,000 ms) to the start-of-day
    add(
         toTimestamp(formatDateTime($ActionDateTimeUtc, 'yyyy-MM-dd')),
         86400000
    )
)
