using System;
using Xunit;

public class DateRangeTests
{
    private static readonly TimeOnly RolloverTime = new(hour: 16, minute: 0); // 16:00 UTC

    [Fact]
    public void Today_AfterRollover_ReturnsCurrentWindow()
    {
        var now = new DateTime(year: 2025, month: 9, day: 17, hour: 17, minute: 00, second: 00, DateTimeKind.Utc);

        var (start, end) = Util.GetDateRange(DateRange.Today, rollOverUtc: RolloverTime, now);

        Assert.Equal(new DateTime(year: 2025, month: 9, day: 17, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(year: 2025, month: 9, day: 18, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), end);
        Assert.Equal(TimeSpan.FromDays(1), end - start);
    }

    [Fact]
    public void Today_BeforeRollover_ReturnsPreviousWindow()
    {
        var now = new DateTime(year: 2025, month: 9, day: 17, hour: 15, minute: 59, second: 59, DateTimeKind.Utc);

        var (start, end) = Util.GetDateRange(DateRange.Today, rollOverUtc: RolloverTime, now);

        Assert.Equal(new DateTime(year: 2025, month: 9, day: 16, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(year: 2025, month: 9, day: 17, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), end);
        Assert.Equal(TimeSpan.FromDays(1), end - start);
    }

    [Fact]
    public void Yesterday_AfterRollover_ReturnsPreviousDayWindow()
    {
        var now = new DateTime(year: 2025, month: 9, day: 17, hour: 17, minute: 00, second: 00, DateTimeKind.Utc);

        var (start, end) = Util.GetDateRange(DateRange.Yesterday, rollOverUtc: RolloverTime, now);

        Assert.Equal(new DateTime(year: 2025, month: 9, day: 16, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(year: 2025, month: 9, day: 17, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), end);
        Assert.Equal(TimeSpan.FromDays(1), end - start);
    }

    [Fact]
    public void Yesterday_BeforeRollover_ReturnsDayBeforeYesterdayWindow()
    {
        var now = new DateTime(year: 2025, month: 9, day: 17, hour: 15, minute: 59, second: 59, DateTimeKind.Utc);

        var (start, end) = Util.GetDateRange(DateRange.Yesterday, rollOverUtc: RolloverTime, now);

        Assert.Equal(new DateTime(year: 2025, month: 9, day: 15, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(year: 2025, month: 9, day: 16, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), end);
        Assert.Equal(TimeSpan.FromDays(1), end - start);
    }

    [Fact]
    public void LastSevenDays_AfterRollover_ReturnsSevenCustomDaysEndingNextStart()
    {
        var now = new DateTime(year: 2025, month: 9, day: 17, hour: 17, minute: 00, second: 00, DateTimeKind.Utc);

        var (start, end) = Util.GetDateRange(DateRange.LastSevenDays, rollOverUtc: RolloverTime, now);

        Assert.Equal(new DateTime(year: 2025, month: 9, day: 10, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(year: 2025, month: 9, day: 18, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), end);
        Assert.Equal(TimeSpan.FromDays(8), end - start); // 7 full [start,end) custom days => 8 * 24h span to the next start
    }

    [Fact]
    public void LastThirtyDays_AfterRollover_ReturnsThirtyCustomDaysEndingNextStart()
    {
        var now = new DateTime(year: 2025, month: 9, day: 17, hour: 17, minute: 00, second: 00, DateTimeKind.Utc);

        var (start, end) = Util.GetDateRange(DateRange.LastThirtyDays, rollOverUtc: RolloverTime, now);

        Assert.Equal(new DateTime(year: 2025, month: 8, day: 18, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(year: 2025, month: 9, day: 18, hour: 16, minute: 00, second: 00, DateTimeKind.Utc), end);
        Assert.Equal(TimeSpan.FromDays(31), end - start); // 30 custom days plus current window end
    }

    [Fact]
    public void MidnightRollover_Today_ReturnsCalendarDayWindow()
    {
        var midnight = new TimeOnly(hour: 0, minute: 0);
        var now = new DateTime(year: 2025, month: 9, day: 17, hour: 10, minute: 00, second: 00, DateTimeKind.Utc);

        var (start, end) = Util.GetDateRange(DateRange.Today, rollOverUtc: midnight, now);

        Assert.Equal(new DateTime(year: 2025, month: 9, day: 17, hour: 0, minute: 00, second: 00, DateTimeKind.Utc), start);
        Assert.Equal(new DateTime(year: 2025, month: 9, day: 18, hour: 0, minute: 00, second: 00, DateTimeKind.Utc), end);
        Assert.Equal(TimeSpan.FromDays(1), end - start);
    }
}
