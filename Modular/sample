public interface IRedisScriptManager
{
    Task<LoadedLuaScript> GetOrLoadAsync(string script);
}

public class RedisScriptManager : IRedisScriptManager
{
    private readonly IConnectionMultiplexer _redis;
    private readonly ConcurrentDictionary<string, Lazy<Task<LoadedLuaScript>>> _loadedScripts 
        = new ConcurrentDictionary<string, Lazy<Task<LoadedLuaScript>>>();

    public RedisScriptManager(IConnectionMultiplexer redis)
    {
        _redis = redis;
    }

    public Task<LoadedLuaScript> GetOrLoadAsync(string script)
    {
        var lazyLoadedScript = _loadedScripts.GetOrAdd(script, s => new Lazy<Task<LoadedLuaScript>>(async () =>
        {
            var prepared = LuaScript.Prepare(script);
            var loaded = await prepared.LoadAsync(_redis.GetServer(_redis.GetEndPoints()[0]));
            return loaded;
        }));

        return lazyLoadedScript.Value;
    }
}


services.AddSingleton<IRedisScriptManager, RedisScriptManager>();



public class YourScopedService
{
    private readonly IDatabase _redisDb;
    private readonly IRedisScriptManager _scriptManager;
    private readonly string _luaScript = "your Lua script here...";

    public YourScopedService(IConnectionMultiplexer redis, IRedisScriptManager scriptManager)
    {
        _redisDb = redis.GetDatabase();
        _scriptManager = scriptManager;
    }

    public async Task<RedisResult> ExecuteOptimizedScriptAsync(RedisKey[] keys, RedisValue[] values)
    {
        var loadedScript = await _scriptManager.GetOrLoadAsync(_luaScript);

        try
        {
            // Attempt execution via SHA (fast path)
            return await loadedScript.EvaluateAsync(_redisDb, keys, values);
        }
        catch (RedisServerException ex) when (ex.Message.StartsWith("NOSCRIPT", StringComparison.OrdinalIgnoreCase))
        {
            // Rare scenario: Script evicted from Redis (e.g. Redis restart or cache clear)
            // Force reload script and execute again
            loadedScript = await ReloadScriptAsync();
            return await loadedScript.EvaluateAsync(_redisDb, keys, values);
        }
    }

    private async Task<LoadedLuaScript> ReloadScriptAsync()
    {
        // Force script reload into Redis
        var prepared = LuaScript.Prepare(_luaScript);
        var loaded = await prepared.LoadAsync(_redisDb.Multiplexer.GetServer(_redisDb.Multiplexer.GetEndPoints()[0]));
        return loaded;
    }
}



var result = await script2.EvaluateAsync(
    _redis,
    new 
    {
        keyLender = (RedisKey) lender.Key,
        keyBorrower = (RedisKey) borrower.Key,

        deltaLender = lender.Delta.ToString("G", CultureInfo.InvariantCulture),
        maxLender = lender.MaxLimit.ToString("G", CultureInfo.InvariantCulture),
        dbValLender = lender.DbBaseLine.HasValue 
            ? lender.DbBaseLine.Value.ToString("G", CultureInfo.InvariantCulture) 
            : "",
        expAtLender = new DateTimeOffset(lender.ExpireAtUtc).ToUnixTimeMilliseconds(),

        deltaBorrower = borrower.Delta.ToString("G", CultureInfo.InvariantCulture),
        maxBorrower = borrower.MaxLimit.ToString("G", CultureInfo.InvariantCulture),
        dbValBorrower = borrower.DbBaseLine.HasValue 
            ? borrower.DbBaseLine.Value.ToString("G", CultureInfo.InvariantCulture) 
            : "",
        expAtBorrower = new DateTimeOffset(borrower.ExpireAtUtc).ToUnixTimeMilliseconds(),
    });