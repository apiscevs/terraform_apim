using EasyCaching.Redis;
using StackExchange.Redis;

public sealed class MultiplexerRedisProvider : IRedisDatabaseProvider
{
    private readonly IConnectionMultiplexer _mux;
    private readonly int _db;

    public MultiplexerRedisProvider(IConnectionMultiplexer mux, int db = -1)
    {
        _mux = mux;
        _db = db; // -1 = default DB
    }

    public IDatabase GetDatabase() => _mux.GetDatabase(_db);
}



[CollectionDefinition("RedisIntegration", DisableParallelization = true)]
public sealed class RedisIntegrationCollection : ICollectionFixture<RedisFixture> { }

public sealed class RedisFixture : IAsyncLifetime, IDisposable
{
    public ConnectionMultiplexer Connection { get; private set; } = default!;
    public IServer Server { get; private set; } = default!;
    public IRedisDatabaseProvider Provider { get; private set; } = default!;
    public IDatabase Db => Provider.GetDatabase();
    public RedisScriptManager ScriptManager { get; private set; } = default!;

    public async Task InitializeAsync()
    {
        Connection = await ConnectionMultiplexer
            .ConnectAsync("localhost:6379,allowAdmin=true,abortConnect=false");

        var ep = Connection.GetEndPoints()[0];
        Server = Connection.GetServer(ep);

        Provider = new MultiplexerRedisProvider(Connection); // <-- adapter
        ScriptManager = new RedisScriptManager(Provider);    // <-- expects IRedisDatabaseProvider

        await Server.FlushDatabaseAsync(Db.Database); // clean state
    }

    public Task DisposeAsync() => Task.CompletedTask;
    public void Dispose() => Connection?.Dispose();
}


[Collection("RedisIntegration")]
public class NotionalValueRedisServiceIntegrationTests
{
    private readonly RedisFixture _fx;
    private readonly Mock<IMarketTimeService> _marketTimeService = new();
    private readonly Mock<IPartyRepository> _partyRepo = new();
    private readonly Mock<INotionalValueService> _notionalValue = new();

    public NotionalValueRedisServiceIntegrationTests(RedisFixture fx) => _fx = fx;

    [Fact]
    public async Task Example()
    {
        await _fx.Server.FlushDatabaseAsync(_fx.Db.Database);

        var lua = new LuaExecutor(_fx.Provider, _fx.ScriptManager); // same provider
        var sut = new NotionalValueRedisService(
            _marketTimeService.Object,
            _notionalValue.Object,
            _partyRepo.Object,
            _fx.ScriptManager,                // shares the provider/connection
            lua,
            Mock.Of<ILogger<NotionalValueRedisService>>()
        );

        // arrange/act/assert...
    }
}