private async Task SendMessagesInSafeBatchesAsync(
    ServiceBusSender sender,
    IEnumerable<ServiceBusMessage> input)
{
    // create the first empty batch
    ServiceBusMessageBatch batch = await sender.CreateMessageBatchAsync();

    foreach (var message in input)
    {
        // 1️⃣ try to add to current batch
        if (!batch.TryAddMessage(message))
        {
            // 2️⃣ current batch is full – flush it
            await sender.SendMessagesAsync(batch);

            // 3️⃣ start a brand–new batch
            batch = await sender.CreateMessageBatchAsync();

            // 4️⃣ MUST succeed now or message itself > max batch size
            if (!batch.TryAddMessage(message))
            {
                // 5️⃣ send that single huge message on its own
                await sender.SendMessagesAsync(new[] { message });
            }
        }
    }

    // 6️⃣ flush whatever is left
    if (batch.Count > 0)
    {
        await sender.SendMessagesAsync(batch);
    }
}







public async Task SendBatchAsync(IList<MessageBase> messages)
{
    var messagesByTopic = messages
        .Select(m =>
        {
            var (topic, subject) = GetTopicAndSubjectForMessageType(m);
            return (msg: m, topic, subject);
        })
        .GroupBy(t => t.topic)
        .ToDictionary(g => g.Key, g => g);

    foreach (var (topic, topicMessages) in messagesByTopic)
    {
        _logger.LogTrace("Sending {Count} messages to topic {Topic}",
            topicMessages.Count(), topic);

        // ensure sender cache
        if (!_messageSenders.TryGetValue(topic, out var sender))
        {
            sender = _serviceBusClient.CreateSender(topic);
            _messageSenders[topic] = sender;
        }

        // materialize ServiceBusMessage objects up front
        var sbMessages = new List<ServiceBusMessage>(topicMessages.Count());
        foreach (var (msg, _, subject) in topicMessages)
        {
            sbMessages.Add(await CreateServiceBusMessageAsync(msg, null, subject));
        }

        // 🔥 bullet‑proof batch send
        await SendMessagesInSafeBatchesAsync(sender, sbMessages);
    }
}