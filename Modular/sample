        public override Stream ToStream<T>(T input)
        {
            // Revert to original string-based serialization for compatibility
            using var stringWriter = new StringWriter();
            using (var jsonWriter = new JsonTextWriter(stringWriter)
            {
                Formatting = Formatting.None
            })
            {
                var serializer = CreateSerializer();
                // Note: Serialize(TextWriter, object) ensures the same behavior as before
                serializer.Serialize(stringWriter, input);
            }

            string json = stringWriter.ToString();
            byte[] bytes = Encoding.UTF8.GetBytes(json);
            return new MemoryStream(bytes);
        })
            {
                var serializer = CreateSerializer();
                serializer.Serialize(jsonWriter, input);
                jsonWriter.Flush();
                streamWriter.Flush();
            }

            memoryStream.Position = 0;
            return memoryStream;
        }